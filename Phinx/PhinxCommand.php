<?php
declare(strict_types=1);

namespace Phinx;

use Exception;
use Phinx\Command\Init;
use Phinx\Command\Migrate;
use Phinx\Command\Rollback;
use Phinx\Command\SeedCreate;
use Phinx\Command\Status;
use Phinx\Command\Test;
use Phinx\Console\Command\Breakpoint;
use Phinx\Console\Command\Create;
use Phinx\Console\Command\SeedRun;
use Symfony\Component\Console\Application as SymfonyApplication;
use Symfony\Component\Console\Input\ArgvInput as SymfonyArgvInput;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use function HuangZx\ref_copy_prop_value;

class PhinxCommand extends Command
{
    public function __construct()
    {
    }

    public function run(Input $input, Output $output): int
    {
        $refInput = new \ReflectionClass(\Phinx\Input::class);
        /** @var Input $newInput */
        $newInput = $refInput->newInstanceWithoutConstructor();
        foreach ($refInput->getProperties() as $property) {
            if ($property->isStatic()) {
                continue;
            }
            ref_copy_prop_value($input, $newInput, $property->getName());
        }
        return parent::run($newInput, $output); // TODO: Change the autogenerated stub
    }

    public function configure()
    {
        $this->setName('phinx')
            ->setDescription('phin for thinkphp');
    }

    /**
     * @param Input  $input
     * @param Output $output
     * @return int|void|null
     * @throws Exception
     */
    protected function execute(Input $input, Output $output)
    {
        $phinx = new SymfonyApplication();
        $phinx->setAutoExit(false);
        $phinx->addCommands([
            new Init(),
            new Create(),
            new Migrate(),
            new Rollback(),
            new Status(),
            new Breakpoint(),
            new Test(),
            new SeedCreate(),
            new SeedRun(),
        ]);

        $argv = $_SERVER['argv'];
        array_shift($argv);
        array_shift($argv);
        array_unshift($argv, '.');

        $argvInput = new SymfonyArgvInput($argv);
        $phinx->run($argvInput);
    }
}
